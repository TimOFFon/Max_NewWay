//===================================================
//===================================================
//            Опциональная цепочка '?.'
//===================================================
//===================================================
/*
    Опциональная цепочка ?. - позволяет получить 
                              доступ к вложенным
                              данным объекта,
                              и избежать ошибок, 
                              если эти св-ва 
                              отсутствуют.
*/
// Пример ---------------------------------------------
{
    let obj = {};

    // console.log(obj.key.value); // Uncaught TypeError
    // console.log(obj?.key?.value); // undefined
}//---------------------------------------------------

/*=====================================================
     Опциональная цепочка ?. останавливает вычисление 
     и возвращает undefined, если значение перед ?. 
     равно undefined или null.
=====================================================*/

// Переменная перед ?. должна быть объявлена-----------
{
    // console.log(user?.key); // Uncaught ReferenceError:
}//---------------------------------------------------

// (как сокр. вычисления) -----------------------------
{
    function num(a) {
        return a *= 2;
    }
    let obj = null;
    let x = 5;

    obj?.num(x);

    // console.log(x); // 5 (без изменений)
}//----------------------------------------------------

// Применение с функциями ---------------------------
{
    let obj = {
        method() {
            console.log('Я сработало!');
        }
    };

    let anyObj = {};

    // obj.method?.(); // Я сработало!
    // anyObj.method?.(); // ничего не произойдет
}//----------------------------------------------------

// Применение с квадратными скобками ------------------
{
    let key = 'something_Key';

    let obj = {
        something_Key: 'something value'
    };

    let obj2 = null;

    // console.log(obj?.[key]); // something value
    // console.log(obj2?.[key]); // undefined
}//--------------------------------------------------

// Использование с delete --------------------------
{
    let obj = {
        key_1: 1,
        key_2: 2,
        key_3: null,
        key_4: undefined
    };
    let obj2 = null;

    // console.log(delete obj?.key_1); // true
    // console.log(delete obj?.key_3); // true
    // console.log(delete obj?.key_4); // true
    // console.log(obj); // {key_2: 2}
    
    
    // console.log(delete obj2?.key_4); // true
    // console.log(obj2); // null
    // console.log(delete obj2.key_4); // Uncaught TypeError
}//-----------------------------------------------------