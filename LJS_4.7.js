//=====================================================
//=====================================================
//                 Тип данных Symbol
//=====================================================
//=====================================================
// Создание 
{
    let id = Symbol();
}

// Создание с описанием (имя)
{
    let id = Symbol('id');
}

/*================================================
    Одинаковые имена это все равно разные символы.
================================================*/
{
    let id1 = Symbol('id');
    let id2 = Symbol('id');

    // console.log(id1 == id2); // false
}

// Символа не преобразуются автаматический в строки
{
    let id = Symbol('id');
    // alert(id); // Uncaught TypeError
}

// Если необходимо преоразовать символ в строку
{
    let id = Symbol('id');
    // alert(id.toString()); // Symbol(id)
}

// Если нужно описание
{
    let id = Symbol('id');
    // alert(id.description); // id
}


//==================================================
//==================================================
//               «Скрытые» свойства
//==================================================
//==================================================
/*
     Символы позволяют создавать "скрытые" св-ва 
     объектов, для защиты от перезаписи из разных
     программы.
     Также не видны в цикле "for..of"
*/
// Два исмвола с одним и тем же именем не конфликтуют
{
    let id1 = Symbol('id');
    let id2 = Symbol('id');
    let obj = {
        [id1]: 'наш идентификатор',
        [id2]: 'их идентификатор',
    };

    // console.log(obj[id1]); // наш идентификатор
    // console.log(obj[id2]); // их идентификатор
}

// Object.assign видит символы
{
    let id = Symbol('id');
    let obj = {
        [id]: 123
    };
    let clone = Object.assign({}, obj);
    // console.log(clone[id]); // 123
}

/*
Object.getOwnPropertySymbols(obj) – с его помощью можно 
                                   получить все свойства 
                                   объекта с 
                                   ключами-символами.

          Reflect.ownKeys(obj), - возвращает все 
                                  ключи объекта
*/
/*
    JSON.stringify() игнорирует свойства 
                     с ключами Symbol
*/
//Пример
{
    // JSON.stringify({[Symbol("foo")]: "foo"});
    // '{}'
}


//===================================================
//===================================================
//               Глобальные символы        
//===================================================
//===================================================
/*
      Если есть необходимость чтобы символы с 
      одинаковыми именами были одной сущностью,
      например разные части приложения нуждаются в
      данных записанных в одном символе,
      то используется 
      ---------ГЛОБАЛЬНЫЙ РЕЕСТР СИМВОЛОВ--------

      Для чтения (или, при отсутствии, создания) 
      символа из реестра используется вызов 
      Symbol.for(key)

*/
// ПРИМЕР (создание и чтение ГЛОБАЛЬНОГО символа)
{
    let id = Symbol.for('id');
    let idAgan = Symbol.for('id');

    // console.log(id === idAgan); // true
}

//==================================================
//==================================================
//              Symbol.keyFor
//==================================================
//==================================================
/*
      обратный метод: Symbol.keyFor(sym), 
      наоборот, принимает глобальный символ и 
      возвращает его имя.
*/
// Пример
{
    let sym = Symbol.for('name');
    let sym2 = Symbol.for('id');

    // console.log(Symbol.keyFor(sym)); // name
    // console.log(Symbol.keyFor(sym2)); //  id
}


/*
            этот метод не будет работать для 
            неглобальных символов
*/
// Пример
{
    let globalSymbol = Symbol.for('name');
    let localSymbol = Symbol('name');

    // console.log(Symbol.keyFor(globalSymbol));// name
    // console.log(Symbol.keyFor(localSymbol));// undefined

    // console.log(localSymbol.description); // name
}


//=====================================================
//=====================================================
//                  Системные символы
//=====================================================
//=====================================================
/*
     Существует множество «системных» символов, 
     использующихся внутри самого JavaScript,

     можем использовать их, чтобы настраивать 
     различные аспекты поведения объектов.

    Symbol.iterator - позволяет итерировать
                      объекты
                      Используется конструкцией 
                      for...of.

    Symbol.toPrimitive - позволяет описать правила
                         преобразования объекта               
*/